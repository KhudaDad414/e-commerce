{
  "openapi": "3.0.0",
  "info": {
    "title": "Books API",
    "version": "1.0.0",
    "description": "API for Managing CRUD operations for Books API."
  },
  "servers": [
    {
      "url": "http://localhost:3000/api",
      "description": "Development Server"
    }
  ],
  "paths": {
    "/books": {
      "get": {
        "tags": [
          "Books"
        ],
        "description": "Get All of the books.",
        "responses": {
          "200": {
            "description": "Request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Book"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      },
      "post": {
        "tags": [
          "Books"
        ],
        "description": "Create a new book item.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Book item created successfully."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/books/{id}": {
      "patch": {
        "tags": [
          "Books"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "name": "id",
            "description": "Id of the book that you want to update.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "description": "update book information.",
        "responses": {
          "200": {
            "description": "Update one of the fields of the books.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              }
            }
          },
          "500": {
            "description": "Server Error."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaseBook"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Books"
        ],
        "description": "delete book by id.",
        "parameters": [
          {
            "in": "path",
            "required": true,
            "name": "id",
            "description": "Id of the book that you want to delete.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Book removed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              }
            }
          },
          "500": {
            "description": "Server Error."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BaseBook": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "author": {
            "type": "string"
          },
          "isbn": {
            "type": "string"
          },
          "publisher": {
            "type": "string"
          },
          "publishDate": {
            "type": "string",
            "format": "date"
          },
          "pageCount": {
            "type": "integer"
          },
          "language": {
            "type": "string"
          },
          "genre": {
            "type": "string"
          }
        }
      },
      "BookCreate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseBook"
          },
          {
            "type": "object",
            "required": [
              "title",
              "author",
              "language"
            ]
          }
        ]
      },
      "Book": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseBook"
          },
          {
            "type": "object",
            "required": [
              "id",
              "title",
              "author",
              "language"
            ],
            "properties": {
              "id": {
                "type": "integer"
              }
            }
          }
        ]
      }
    }
  },
  "tags": [
    {
      "name": "Books",
      "description": "API's related to book management."
    }
  ]
}